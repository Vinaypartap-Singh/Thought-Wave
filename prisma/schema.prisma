generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String      @id @default(cuid())
  email           String      @unique
  username        String      @unique
  clerkId         String      @unique
  name            String?
  bio             String?
  image           String?
  location        String?
  website         String?
  businessProfile Boolean     @default(false)
  profileType     ProfileType @default(PUBLIC)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  encryptionKey   String?

  // Relations
  posts                Post[]
  comments             Comment[]
  likes                Like[]
  shares               Share[]
  followers            Follows[]      @relation("following")
  following            Follows[]      @relation("follower")
  notifications        Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")

  // Chat Relations
  sentChatRequests     ChatRequest[] @relation("senderRequest")
  receivedChatRequests ChatRequest[] @relation("receiverRequest")

  RoomMember RoomMember[]

  // Business Relations
  stores       Store?
  // Reverse relation for messages sent by the user
  sentMessages Message[] @relation("sentMessages")
}

model Store {
  id        String   @id @default(cuid())
  name      String
  image     String?
  ownerId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  products Product[] // A store can have multiple products

  @@index([ownerId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  storeId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model Post {
  id                 String   @id @default(cuid())
  authorId           String
  content            String?
  image              String?
  authorProfileImage String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  shares        Share[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Share {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())

  // Relations
  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model ChatRequest {
  id         String     @id @default(cuid())
  senderId   String
  receiverId String
  status     ChatStatus @default(NOT_REQUESTED)
  createdAt  DateTime   @default(now())

  // Relations
  sender   User @relation("senderRequest", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("receiverRequest", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Message {
  id                  String   @id @default(cuid())
  roomId              String
  senderId            String
  content             String
  iv                  String?
  senderEncryptionKey String?
  createdAt           DateTime @default(now())

  // Relations
  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender User @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([roomId])
}

model Room {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users    RoomMember[]
  messages Message[]

  @@unique([id]) // Ensuring each room has a unique ID
}

model RoomMember {
  roomId   String
  userId   String
  joinedAt DateTime @default(now())

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([roomId, userId]) // Composite key to avoid duplicates in the RoomMember table
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

enum ProfileType {
  PUBLIC
  PRIVATE
}

enum ChatStatus {
  NOT_REQUESTED
  PENDING
  ACCEPTED
  REJECTED
}
